
version: "3.7"
services:
    # An example sleep service with most of the features of overnode explained
    sleep:
        # Declare unique container name
        # If not defined, the default will be assigned.
        container_name: ${OVERNODE_PROJECT_ID}-sleep
        # Declare hostname to assign
        # If it has got .weave.local parent domain,
        # this address will be registered in the clusters DNS
        hostname: ${OVERNODE_PROJECT_ID}-sleep.weave.local
        # Use bridge mode to attach the container to the cluster network
        network_mode: bridge
        # Setup correct zombie cleanup
        init: true
        # Pick an image
        image: alpine
        # Define resource constraints
        deploy:
            resources:
                limits:
                    cpus: "0.1"
        environment:
            # This will be unique ID of a node managed by overnode
            NODE_ID: ${OVERNODE_ID}
            NODE_TARGET: ${OVERNODE_TARGET}
            # Optionally assign fixed IP address
            # OVERNODE_CONFIG_SLEEP_ID - is a sequential position
            # of the sleep section in the overnode.yml configuration file
            # OVERNODE_ID - is the unique ID of a node managed by overnode
            WEAVE_CIDR: 10.32.${OVERNODE_CONFIG_SLEEP_ID}.${OVERNODE_ID}/12
            # OVERNODE_SESSION_ID has got new value every run of overnode command
            # Uncomment the following line in order to force
            # re-create of a container every up command
            # SESSION_ID: ${OVERNODE_SESSION_ID}
        volumes:
            # /configs folder within a container will have a copy
            # of the content in the current directory,
            # i.e. the directory where overnode.yml file is located
            # you can map its subfolders to limit the access scope
            - ${OVERNODE_ETC}:/configs
            # This is an example of the local drive volume created by docker
            - data:/data
        # Enable the service continously restarting
        restart: unless-stopped
        # Optional health check command and settings
        # "overnode up --rollover" uses the health status 
        healthcheck:
            test: ["CMD", "true"]
            interval: 20s
            timeout: 100s
            retries: 3
            start_period: 10s
        # The command dumps all environment variables,
        # lists /configs directory content and goes to sleep
        command: sh -c "env && ls -la /configs && sleep ${SLEEP_TIME}"

volumes:
    data:
        name: ${OVERNODE_PROJECT_ID}-data

